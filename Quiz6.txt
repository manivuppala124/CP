Q1. Predict Output for below code

class Demo extends Thread {
    public void run() {
        System.out.println(Thread.currentThread().getName() + " is running");
    }
    public static void main(String[] args) {
        Demo t1 = new Demo();
        t1.start();
        t1.start();
    }
}

(A) Two lines printed

(B) IllegalThreadStateException

(C) No output

(D) Compilation error

Answer: (B) IllegalThreadStateException

Q2. Predict Output for below code
public class Main {
    public static void main(String[] args) throws InterruptedException {
        Thread t = new Thread(() -> {
            try {
                Thread.sleep(500);
                System.out.print("A");
            } catch (InterruptedException e) {
                System.out.print("B");
            }
        });
        t.start();
        t.interrupt();
    }
}

(A) A

(B) B

(C) AB

(D) No output

Answer: B
Q3. Predict Output for below code
public class Main {
    static int counter = 0;
    public static void main(String[] args) {
        Runnable r = () -> {
            for (int i = 0; i < 1000; i++) {
                counter++;
            }
        };
        Thread t1 = new Thread(r);
        Thread t2 = new Thread(r);
        t1.start();
        t2.start();
        System.out.println(counter);
    }
}

(A) 2000

(B) Random value < 2000

(C) Compile error

(D) Exception

Answer: B

Q4. Predict Output for below code
class Main {
    public static void main(String[] args) {
        Thread t = new Thread(() -> {
            while(true) {}
        });
        t.setDaemon(true);
        t.start();
        System.out.println("Done");
    }
}

(A) Done

(B) Infinite loop

(C) Deadlock

(D) Exception

Answer: A

Q5. Predict Output for below code
public class Main {
    public static void main(String[] args) {
        Runnable task = () -> System.out.println("Task executed");
        new Thread(task).run();
        System.out.println("Main ends");
    }
}

(A) Task executed Main ends

(B) Main ends Task executed

(C) Only Main ends

(D) Only Task executed

Answer: A

Q6. Predict Output for below code
class Printer {
    synchronized void print() {
        System.out.println(Thread.currentThread().getName() + " printing");
    }
}

public class Main {
    public static void main(String[] args) {
        Printer p = new Printer();
        new Thread(() -> p.print()).start();
        new Thread(() -> p.print()).start();
    }
}

(A) Thread-0 Thread-1

(B) Random

(C) Only one prints

(D) Exception

Answer: A
Q7. Which of the following is NOT a method of the Thread class?
(A) start()

(B) run()

(C) sleep()

(D) notify()

Answer: D

Q8. Predict Output for below code
class Test extends Thread {
    public void run() {
        throw new RuntimeException();
    }
    public static void main(String[] args) {
        new Test().start();
        System.out.println("Main thread running");
    }
}

(A) Main thread running and followed by exception

(B) Runtime exception occurs immediately

(C) Program crashes before main

(D) Compile error

Answer: A

Q9. Predict Output for below code
public class Test extends Thread {
    public static void main(String[] args) {
        Test t1 = new Test();
        System.out.println(t1.getState());
        t1.start();
        System.out.println(t1.getState());
    }
}

(A) NEW  RUNNABLE

(B) RUNNABLE  TERMINATED

(C) NEW TERMINATED

(D) BLOCKED WAITING

(E) Compilation fails

Answer: A

Q10. What will happen if a thread sleeps inside a synchronized block?
(A) Lock is released

(B) Lock is retained

(C) Thread is terminated

(D) Deadlock occurs

Answer: B

Q11. Which of the following is thread-safe?
(A) ArrayList

(B) HashMap

(C) StringBuffer

(D) StringBuilder

Answer: C

Q12. Predict Output for below code

class Shared {
    synchronized void test() {
        for (int i = 1; i <= 2; i++) {
            System.out.print(i + " ");
        }
    }
}
public class Test {
    public static void main(String[] args) {
        Shared s = new Shared();
        new Thread(() -> s.test()).start();
        new Thread(() -> s.test()).start();
    }
}

(A) 1 2 1 2

(B) 1 1 2 2

(C) 2 2 1 1

(D) Unpredictable

Answer: A

Q13. Predict Output for below code

public class Main {
    public static void main(String[] args) {
        new Thread(() -> {
            throw new RuntimeException("Oops!");
        }).start();
        System.out.println("Main complete");
    }
}

(A) Main complete

(B) Exception Oops!

(C) Main complete Exception Oops!

(D) Program crash

Answer: C

Hint: Main thread completes, exception happens in child thread asynchronously.

